import kleur from 'kleur';
import * as fs from 'fs';
import path from 'path';

type LogType = 'INFO' | 'WARN' | 'ERROR' | 'NEWLINE' | 'DATE';

type LogQueue = {
  type: LogType;
  input: string[];
  time?: number;
  raw?: boolean;
};

export default class Logger {
  queuedLog: LogQueue[] = [];

  name: string = 'none';
  logChannel: TextChannel | null = null;
  client: Client | null = null;
  showConsole = true;

  timeStart: number = Date.now();

  constructor(name: string, categoryId: Snowflake, client: Client) {
    client.on('ready', () => this.build(name, categoryId, client));
  }

  async build(name: string, categoryId: Snowflake, client: Client) {
    this.name = name;

    const category = (await client.channels.fetch(
      categoryId
    )) as CategoryChannel;

    let logChannel: TextChannel = (await category.children.cache.find(
      x => x.name.toLowerCase() == name.split(' ').join('-').toLowerCase()
    )) as TextChannel;
    if (!logChannel)
      logChannel = await category.children.create({
        name,
        type: ChannelType.GuildText,
      });

    this.logChannel = logChannel;
    this.client = client;
  }

  noConsole() {
    this.showConsole = false;
    return this;
  }

  raw(...input: string[]) {
    if (this.showConsole) log(input, 'INFO');
    this.showConsole = true;

    this.queuedLog.push({
      type: 'INFO',
      input,
      time: Date.now(),
      raw: true,
    });
  }

  info(...input: string[]) {
    if (this.showConsole) log(input, 'INFO');
    this.showConsole = true;

    this.queuedLog.push({
      type: 'INFO',
      input,
      time: Date.now(),
    });

    return this;
  }

  warn(...input: string[]) {
    if (this.showConsole) log(input, 'WARN');
    this.showConsole = true;

    this.queuedLog.push({
      type: 'WARN',
      input,
      time: Date.now(),
    });

    return this;
  }

  error(...input: string[]) {
    if (this.showConsole) log(input, 'ERROR');
    this.showConsole = true;

    this.queuedLog.push({
      type: 'ERROR',
      input,
      time: Date.now(),
    });

    return this;
  }

  newLine() {
    // No \n needed because it is used in .map function
    if (this.showConsole) log([''], 'NEWLINE');
    this.showConsole = true;

    this.queuedLog.push({
      type: 'NEWLINE',
      input: [''],
    });

    return this;
  }

  async write() {
    if (this.logChannel === null)
      return console.log(`No log channel: ${this.name}`);

    const date = `<t:${Math.floor(this.timeStart / 1000)}:T>`;

    const char = (raw?: boolean) => (raw ? '' : '`');
    const output = this.queuedLog.map(x =>
      x.type === 'NEWLINE'
        ? x.input[0]
        : `${getEmoji(x.type)} ${char(x.raw)}${x.input
            .map((inp, idx) => (idx === 0 ? inp : `    -> ${inp}`))
            .join('\n')}${char(x.raw)}`
    );
    const fileOutput = this.queuedLog.map(x =>
      x.type === 'NEWLINE'
        ? x.input[0]
        : `${
            x.time && new Date(x.time).toISOString().padEnd(27, ' ') + ' '
          }${x.type.padEnd(5)} ${x.input
            .map((inp, idx) =>
              idx === 0 ? inp : `                              -> ${inp}`
            )
            .join('\n')}`
    );

    let truncatedOutputs = [];

    let stringLength = 0;
    let lastIndex = 0;
    for (let i = lastIndex; i < output.length; i++) {
      stringLength += output[i].length;

      if (stringLength >= 1790) {
        stringLength = 0;
        truncatedOutputs.push(output.slice(lastIndex, i).join('\n'));
        lastIndex = i;
      }
    }
    truncatedOutputs.push(output.slice(lastIndex, output.length).join('\n'));

    if (truncatedOutputs.length === 0) {
      truncatedOutputs.push(`${getEmoji('ERROR')} \`Failed to log output\``);
    }

    this.queuedLog = [];
    const firstMessage =
      `${getEmoji('DATE')} **${this.name}** | ${date}\n\n` +
      truncatedOutputs[0];

    const message = await this.logChannel.send(firstMessage);

    if (!fs.existsSync(path.join(__dirname, '../logs')))
      fs.mkdirSync(path.join(__dirname, '../logs'));
    fs.writeFileSync(
      path.join(__dirname, `../logs/${this.name?.toLowerCase()}.log`),
      fileOutput.join('\n')
    );

    if (truncatedOutputs.length > 1)
      truncatedOutputs.push(`**Log Start:** ${message.url}`);
    try {
      for (let i = 1; i < truncatedOutputs.length; i++) {
        if (truncatedOutputs[i].trim() === '') continue;

        await this.logChannel.send(truncatedOutputs[i]);
      }
    } catch (err) {}
  }
}

function log(input: string[], type: LogType) {
  const out = input
    .map((inp, idx) => (idx === 0 ? inp : `    -> ${inp}`))
    .join('\n');

  if (type === 'INFO') console.log(kleur.blue('INFO: ') + out);
  else if (type === 'WARN') console.warn(kleur.yellow('WARN: ') + out);
  else if (type === 'ERROR') console.error(kleur.red('ERROR: ') + out);
  else if (type === 'NEWLINE') console.log('\n');
  else if (type === 'DATE') console.log(out);
}

function getEmoji(type: LogType) {
  if (type === 'INFO') return `<:info_icon:1065819769514766337>`;
  else if (type === 'WARN') return `<:warn_icon:1065819766541004920>`;
  else if (type === 'ERROR') return `<:error_icon:1065819768319385630>`;
  else if (type === 'DATE') return `<:time_icon:1065823425244975234>`;
}
